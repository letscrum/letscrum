syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "api/general/v1/letscrum.proto";
import "api/project/v1/project.proto";
import "api/project/v1/sprint.proto";
import "api/item/v1/item.proto";
import "api/item/v1/epic.proto";
import "api/item/v1/feature.proto";
import "api/item/v1/work_item.proto";
import "api/item/v1/task.proto";
import "api/user/v1/user.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/letscrum/letscrum/api/letscrum/v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  security_definitions: {
    security: {
      key: "bearer";
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token, prefixed by bearer: bearer token"
      }
    }
  }
  security: {
    security_requirement: {
      key: "bearer"
    }
  }
};

service Letscrum {
  rpc GetVersion(google.protobuf.Empty) returns (letscrum.api.general.v1.GetVersionResponse) {
    option (google.api.http) = {
      get: "/api/v1/version"
    };
  }

  rpc SignIn(letscrum.api.user.v1.SignInRequest) returns (letscrum.api.user.v1.SignInResponse) {
    option (google.api.http) = {
      post: "/api/v1/signin"
      body: "*"
    };
  }
}

service Project {
  rpc Create(letscrum.api.project.v1.CreateProjectRequest) returns (letscrum.api.project.v1.CreateProjectResponse) {
    option (google.api.http) = {
      post: "/api/v1/projects"
      body: "*"
    };
  }

  rpc Update(letscrum.api.project.v1.UpdateProjectRequest) returns (letscrum.api.project.v1.UpdateProjectResponse) {
    option (google.api.http) = {
      put: "/api/v1/projects/{project_id}"
      body: "*"
    };
  }

  rpc Delete(letscrum.api.project.v1.DeleteProjectRequest) returns (letscrum.api.project.v1.DeleteProjectResponse) {
    option (google.api.http) = {
      delete: "/api/v1/projects/{project_id}"
    };
  }

  rpc List(letscrum.api.project.v1.ListProjectRequest) returns (letscrum.api.project.v1.ListProjectResponse) {
    option (google.api.http) = {
      get: "/api/v1/projects"
    };
  }

  rpc Get(letscrum.api.project.v1.GetProjectRequest) returns (letscrum.api.project.v1.GetProjectResponse) {
    option (google.api.http) = {
      get: "/api/v1/projects/{project_id}"
    };
  }
}

service Sprint {
  rpc Create(letscrum.api.project.v1.CreateSprintRequest) returns (letscrum.api.project.v1.CreateSprintResponse) {
    option (google.api.http) = {
      post: "/api/v1/projects/{project_id}/sprints"
      body: "*"
    };
  }

  rpc Update(letscrum.api.project.v1.UpdateSprintRequest) returns (letscrum.api.project.v1.UpdateSprintResponse) {
    option (google.api.http) = {
      put: "/api/v1/projects/{project_id}/sprints/{sprint_id}"
      body: "*"
    };
  }

  rpc Delete(letscrum.api.project.v1.DeleteSprintRequest) returns (letscrum.api.project.v1.DeleteSprintResponse) {
    option (google.api.http) = {
      delete: "/api/v1/projects/{project_id}/sprints/{sprint_id}"
    };
  }

  rpc List(letscrum.api.project.v1.ListSprintRequest) returns (letscrum.api.project.v1.ListSprintResponse) {
    option (google.api.http) = {
      get: "/api/v1/projects/{project_id}/sprints"
    };
  }

  rpc Get(letscrum.api.project.v1.GetSprintRequest) returns (letscrum.api.project.v1.GetSprintResponse) {
    option (google.api.http) = {
      get: "/api/v1/projects/{project_id}/sprints/{sprint_id}"
    };
  }
}

service SprintMember {
  rpc Add(letscrum.api.project.v1.AddSprintMemberRequest) returns (letscrum.api.project.v1.AddSprintMemberResponse) {
    option (google.api.http) = {
      post: "/api/v1/projects/{project_id}/sprints/{sprint_id}/members"
      body: "*"
    };
  }

  rpc Update(letscrum.api.project.v1.UpdateSprintMemberRequest) returns (letscrum.api.project.v1.UpdateSprintMemberResponse) {
    option (google.api.http) = {
      put: "/api/v1/projects/{project_id}/sprints/{sprint_id}/members"
      body: "*"
    };
  }

  rpc Remove(letscrum.api.project.v1.RemoveSprintMemberRequest) returns (letscrum.api.project.v1.RemoveSprintMemberResponse) {
    option (google.api.http) = {
      delete: "/api/v1/projects/{project_id}/sprints/{sprint_id}/members/{user_id}"
    };
  }

  rpc HardRemove(letscrum.api.project.v1.RemoveSprintMemberRequest) returns (letscrum.api.project.v1.RemoveSprintMemberResponse) {
    option (google.api.http) = {
      delete: "/api/v1/projects/{project_id}/sprints/{sprint_id}/members/{user_id}/remove"
    };
  }

  rpc List(letscrum.api.project.v1.ListSprintMemberRequest) returns (letscrum.api.project.v1.ListSprintMemberResponse) {
    option (google.api.http) = {
      get: "/api/v1/projects/{project_id}/sprints/{sprint_id}/members"
    };
  }
}

service Item {
  rpc List(letscrum.api.item.v1.ListItemRequest) returns (letscrum.api.item.v1.ListItemResponse) {
    option (google.api.http) = {
      get: "/api/v1/projects/{project_id}/items"
    };
  }
}

service Epic {
  rpc List(letscrum.api.item.v1.ListEpicRequest) returns (letscrum.api.item.v1.ListEpicResponse) {
    option (google.api.http) = {
      get: "/api/v1/projects/{project_id}/epics"
    };
  }
}

service Feature {
  rpc List(letscrum.api.item.v1.ListFeatureRequest) returns (letscrum.api.item.v1.ListFeatureResponse) {
    option (google.api.http) = {
      get: "/api/v1/projects/{project_id}/features"
    };
  }
}

service WorkItem {
  rpc Create(letscrum.api.item.v1.CreateWorkItemRequest) returns (letscrum.api.item.v1.CreateWorkItemResponse) {
    option (google.api.http) = {
      post: "/api/v1/projects/{project_id}/workitems"
      body: "*"
    };
  }

  rpc List(letscrum.api.item.v1.ListWorkItemRequest) returns (letscrum.api.item.v1.ListWorkItemResponse) {
    option (google.api.http) = {
      get: "/api/v1/projects/{project_id}/workitems"
    };
  }

  rpc Get(letscrum.api.item.v1.GetWorkItemRequest) returns (letscrum.api.item.v1.GetWorkItemResponse) {
    option (google.api.http) = {
      get: "/api/v1/projects/{project_id}/workitems/{work_item_id}"
    };
  }
}

service Task {
  rpc Create(letscrum.api.item.v1.CreateTaskRequest) returns (letscrum.api.item.v1.CreateTaskResponse) {
    option (google.api.http) = {
      post: "/api/v1/projects/{project_id}/workitems/{work_item_id}/tasks"
      body: "*"
    };
  }

  rpc List(letscrum.api.item.v1.ListTaskRequest) returns (letscrum.api.item.v1.ListTaskResponse) {
    option (google.api.http) = {
      get: "/api/v1/projects/{project_id}/workitems/{work_item_id}/tasks"
    };
  }

  rpc Get(letscrum.api.item.v1.GetTaskRequest) returns (letscrum.api.item.v1.GetTaskResponse) {
    option (google.api.http) = {
      get: "/api/v1/projects/{project_id}/workitems/{work_item_id}/tasks/{task_id}"
    };
  }

  rpc Update(letscrum.api.item.v1.UpdateTaskRequest) returns (letscrum.api.item.v1.UpdateTaskResponse) {
    option (google.api.http) = {
      put: "/api/v1/projects/{project_id}/workitems/{work_item_id}/tasks/{task_id}"
      body: "*"
    };
  }
}

service User {
  rpc List(letscrum.api.user.v1.ListUserRequest) returns (letscrum.api.user.v1.ListUserResponse) {
    option (google.api.http) = {
      get: "/api/v1/users"
    };
  }

  rpc ListUserProject(letscrum.api.project.v1.ListUserProjectRequest) returns (letscrum.api.project.v1.ListUserProjectResponse) {
    option (google.api.http) = {
      get: "/api/v1/users/{user_id}/projects"
    };
  }

  rpc Get(letscrum.api.user.v1.GetUserRequest) returns (letscrum.api.user.v1.GetUserResponse) {
    option (google.api.http) = {
      get: "/api/v1/users/{user_id}"
    };
  }
}
